// Code generated by goctl. DO NOT EDIT.
// goctl 1.8.5
// Source: auth.proto

package auth

import (
	"context"

	"github.com/zeromicro/go-zero/zrpc"
	"google.golang.org/grpc"
)

type (
	Auth interface {
		// 用户注册：注册账号密码，返回 token
		Register(ctx context.Context, in *RegisterReq, opts ...grpc.CallOption) (*RegisterResp, error)
		// 用户登录：验证账号密码，返回 token
		Login(ctx context.Context, in *LoginReq, opts ...grpc.CallOption) (*LoginResp, error)
		// 校验 token 是否有效
		VerifyToken(ctx context.Context, in *VerifyTokenReq, opts ...grpc.CallOption) (*VerifyTokenResp, error)
		// 解析 token，提取 userId（如 userId, deviceId）
		ParseToken(ctx context.Context, in *ParseTokenReq, opts ...grpc.CallOption) (*ParseTokenResp, error)
		// 刷新 token（用于保持会话）
		RefreshToken(ctx context.Context, in *RefreshTokenReq, opts ...grpc.CallOption) (*RefreshTokenResp, error)
		// 多设备：列出当前用户的所有活跃会话
		ListSessions(ctx context.Context, in *ListSessionsReq, opts ...grpc.CallOption) (*ListSessionsResp, error)
		// 多设备：注销某个设备的 token（退出登录）
		LogoutSession(ctx context.Context, in *LogoutSessionReq, opts ...grpc.CallOption) (*LogoutSessionResp, error)
		// 生成 token（用于其他服务调用）
		GenerateToken(ctx context.Context, in *GenerateTokenReq, opts ...grpc.CallOption) (*GenerateTokenResp, error)
	}

	defaultAuth struct {
		cli zrpc.Client
	}
)

func NewAuth(cli zrpc.Client) Auth {
	return &defaultAuth{
		cli: cli,
	}
}

// 用户注册：注册账号密码，返回 token
func (m *defaultAuth) Register(ctx context.Context, in *RegisterReq, opts ...grpc.CallOption) (*RegisterResp, error) {
	client := NewAuthClient(m.cli.Conn())
	return client.Register(ctx, in, opts...)
}

// 用户登录：验证账号密码，返回 token
func (m *defaultAuth) Login(ctx context.Context, in *LoginReq, opts ...grpc.CallOption) (*LoginResp, error) {
	client := NewAuthClient(m.cli.Conn())
	return client.Login(ctx, in, opts...)
}

// 校验 token 是否有效
func (m *defaultAuth) VerifyToken(ctx context.Context, in *VerifyTokenReq, opts ...grpc.CallOption) (*VerifyTokenResp, error) {
	client := NewAuthClient(m.cli.Conn())
	return client.VerifyToken(ctx, in, opts...)
}

// 解析 token，提取 userId（如 userId, deviceId）
func (m *defaultAuth) ParseToken(ctx context.Context, in *ParseTokenReq, opts ...grpc.CallOption) (*ParseTokenResp, error) {
	client := NewAuthClient(m.cli.Conn())
	return client.ParseToken(ctx, in, opts...)
}

// 刷新 token（用于保持会话）
func (m *defaultAuth) RefreshToken(ctx context.Context, in *RefreshTokenReq, opts ...grpc.CallOption) (*RefreshTokenResp, error) {
	client := NewAuthClient(m.cli.Conn())
	return client.RefreshToken(ctx, in, opts...)
}

// 多设备：列出当前用户的所有活跃会话
func (m *defaultAuth) ListSessions(ctx context.Context, in *ListSessionsReq, opts ...grpc.CallOption) (*ListSessionsResp, error) {
	client := NewAuthClient(m.cli.Conn())
	return client.ListSessions(ctx, in, opts...)
}

// 多设备：注销某个设备的 token（退出登录）
func (m *defaultAuth) LogoutSession(ctx context.Context, in *LogoutSessionReq, opts ...grpc.CallOption) (*LogoutSessionResp, error) {
	client := NewAuthClient(m.cli.Conn())
	return client.LogoutSession(ctx, in, opts...)
}

// 生成 token（用于其他服务调用）
func (m *defaultAuth) GenerateToken(ctx context.Context, in *GenerateTokenReq, opts ...grpc.CallOption) (*GenerateTokenResp, error) {
	client := NewAuthClient(m.cli.Conn())
	return client.GenerateToken(ctx, in, opts...)
}
