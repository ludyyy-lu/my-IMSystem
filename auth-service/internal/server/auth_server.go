// Code generated by goctl. DO NOT EDIT.
// goctl 1.8.5
// Source: auth.proto

package server

import (
	"context"

	auth_auth "my-IMSystem/auth-service/auth"
	"my-IMSystem/auth-service/internal/logic"
	"my-IMSystem/auth-service/internal/svc"
)

type AuthServer struct {
	svcCtx *svc.ServiceContext
	auth_auth.UnimplementedAuthServer
}

func NewAuthServer(svcCtx *svc.ServiceContext) *AuthServer {
	return &AuthServer{
		svcCtx: svcCtx,
	}
}

// 用户注册：注册账号密码，返回 token
func (s *AuthServer) Register(ctx context.Context, in *auth_auth.RegisterReq) (*auth_auth.RegisterResp, error) {
	l := logic.NewRegisterLogic(ctx, s.svcCtx)
	return l.Register(in)
}

// 用户登录：验证账号密码，返回 token
func (s *AuthServer) Login(ctx context.Context, in *auth_auth.LoginReq) (*auth_auth.LoginResp, error) {
	l := logic.NewLoginLogic(ctx, s.svcCtx)
	return l.Login(in)
}

// 校验 token 是否有效
func (s *AuthServer) VerifyToken(ctx context.Context, in *auth_auth.VerifyTokenReq) (*auth_auth.VerifyTokenResp, error) {
	l := logic.NewVerifyTokenLogic(ctx, s.svcCtx)
	return l.VerifyToken(in)
}

// 解析 token，提取 userId（如 userId, deviceId）
func (s *AuthServer) ParseToken(ctx context.Context, in *auth_auth.ParseTokenReq) (*auth_auth.ParseTokenResp, error) {
	l := logic.NewParseTokenLogic(ctx, s.svcCtx)
	return l.ParseToken(in)
}

// 刷新 token（用于保持会话）
func (s *AuthServer) RefreshToken(ctx context.Context, in *auth_auth.RefreshTokenReq) (*auth_auth.RefreshTokenResp, error) {
	l := logic.NewRefreshTokenLogic(ctx, s.svcCtx)
	return l.RefreshToken(in)
}

// 多设备：列出当前用户的所有活跃会话
func (s *AuthServer) ListSessions(ctx context.Context, in *auth_auth.ListSessionsReq) (*auth_auth.ListSessionsResp, error) {
	l := logic.NewListSessionsLogic(ctx, s.svcCtx)
	return l.ListSessions(in)
}

// 多设备：注销某个设备的 token（退出登录）
func (s *AuthServer) LogoutSession(ctx context.Context, in *auth_auth.LogoutSessionReq) (*auth_auth.LogoutSessionResp, error) {
	l := logic.NewLogoutSessionLogic(ctx, s.svcCtx)
	return l.LogoutSession(in)
}

// 生成 token（用于其他服务调用）
func (s *AuthServer) GenerateToken(ctx context.Context, in *auth_auth.GenerateTokenReq) (*auth_auth.GenerateTokenResp, error) {
	l := logic.NewGenerateTokenLogic(ctx, s.svcCtx)
	return l.GenerateToken(in)
}
