// Code generated by goctl. DO NOT EDIT.
// goctl 1.8.5
// Source: friend.proto

package friend

import (
	"context"

	"github.com/zeromicro/go-zero/zrpc"
	"google.golang.org/grpc"
)

type (
	Friend interface {
		SendFriendRequest(ctx context.Context, in *SendFriendRequestRequest, opts ...grpc.CallOption) (*SendFriendRequestResponse, error)
		GetFriendRequests(ctx context.Context, in *GetFriendRequestsRequest, opts ...grpc.CallOption) (*GetFriendRequestsResponse, error)
		RespondFriendRequest(ctx context.Context, in *RespondFriendRequestRequest, opts ...grpc.CallOption) (*RespondFriendRequestResponse, error)
		GetFriends(ctx context.Context, in *GetFriendsRequest, opts ...grpc.CallOption) (*GetFriendsResponse, error)
		DeleteFriend(ctx context.Context, in *DeleteFriendRequest, opts ...grpc.CallOption) (*DeleteFriendResponse, error)
		BlockFriend(ctx context.Context, in *BlockFriendReq, opts ...grpc.CallOption) (*BlockFriendResp, error)
		UnblockFriend(ctx context.Context, in *UnblockFriendReq, opts ...grpc.CallOption) (*UnblockFriendResp, error)
		GetBlockedList(ctx context.Context, in *GetBlockedListReq, opts ...grpc.CallOption) (*GetBlockedListResp, error)
	}

	defaultFriend struct {
		cli zrpc.Client
	}
)

func NewFriend(cli zrpc.Client) Friend {
	return &defaultFriend{
		cli: cli,
	}
}

func (m *defaultFriend) SendFriendRequest(ctx context.Context, in *SendFriendRequestRequest, opts ...grpc.CallOption) (*SendFriendRequestResponse, error) {
	client := NewFriendClient(m.cli.Conn())
	return client.SendFriendRequest(ctx, in, opts...)
}

func (m *defaultFriend) GetFriendRequests(ctx context.Context, in *GetFriendRequestsRequest, opts ...grpc.CallOption) (*GetFriendRequestsResponse, error) {
	client := NewFriendClient(m.cli.Conn())
	return client.GetFriendRequests(ctx, in, opts...)
}

func (m *defaultFriend) RespondFriendRequest(ctx context.Context, in *RespondFriendRequestRequest, opts ...grpc.CallOption) (*RespondFriendRequestResponse, error) {
	client := NewFriendClient(m.cli.Conn())
	return client.RespondFriendRequest(ctx, in, opts...)
}

func (m *defaultFriend) GetFriends(ctx context.Context, in *GetFriendsRequest, opts ...grpc.CallOption) (*GetFriendsResponse, error) {
	client := NewFriendClient(m.cli.Conn())
	return client.GetFriends(ctx, in, opts...)
}

func (m *defaultFriend) DeleteFriend(ctx context.Context, in *DeleteFriendRequest, opts ...grpc.CallOption) (*DeleteFriendResponse, error) {
	client := NewFriendClient(m.cli.Conn())
	return client.DeleteFriend(ctx, in, opts...)
}

func (m *defaultFriend) BlockFriend(ctx context.Context, in *BlockFriendReq, opts ...grpc.CallOption) (*BlockFriendResp, error) {
	client := NewFriendClient(m.cli.Conn())
	return client.BlockFriend(ctx, in, opts...)
}

func (m *defaultFriend) UnblockFriend(ctx context.Context, in *UnblockFriendReq, opts ...grpc.CallOption) (*UnblockFriendResp, error) {
	client := NewFriendClient(m.cli.Conn())
	return client.UnblockFriend(ctx, in, opts...)
}

func (m *defaultFriend) GetBlockedList(ctx context.Context, in *GetBlockedListReq, opts ...grpc.CallOption) (*GetBlockedListResp, error) {
	client := NewFriendClient(m.cli.Conn())
	return client.GetBlockedList(ctx, in, opts...)
}
