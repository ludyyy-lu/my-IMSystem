// Code generated by goctl. DO NOT EDIT.
// goctl 1.8.5
// Source: friend.proto

package server

import (
	"context"

	friend_friend "my-IMSystem/friend-service/friend"
	"my-IMSystem/friend-service/internal/logic"
	"my-IMSystem/friend-service/internal/svc"
)

type FriendServer struct {
	svcCtx *svc.ServiceContext
	friend_friend.UnimplementedFriendServer
}

func NewFriendServer(svcCtx *svc.ServiceContext) *FriendServer {
	return &FriendServer{
		svcCtx: svcCtx,
	}
}

func (s *FriendServer) SendFriendRequest(ctx context.Context, in *friend_friend.SendFriendRequestRequest) (*friend_friend.SendFriendRequestResponse, error) {
	l := logic.NewSendFriendRequestLogic(ctx, s.svcCtx)
	return l.SendFriendRequest(in)
}

func (s *FriendServer) GetFriendRequests(ctx context.Context, in *friend_friend.GetFriendRequestsRequest) (*friend_friend.GetFriendRequestsResponse, error) {
	l := logic.NewGetFriendRequestsLogic(ctx, s.svcCtx)
	return l.GetFriendRequests(in)
}

func (s *FriendServer) RespondFriendRequest(ctx context.Context, in *friend_friend.RespondFriendRequestRequest) (*friend_friend.RespondFriendRequestResponse, error) {
	l := logic.NewRespondFriendRequestLogic(ctx, s.svcCtx)
	return l.RespondFriendRequest(in)
}

func (s *FriendServer) GetFriends(ctx context.Context, in *friend_friend.GetFriendsRequest) (*friend_friend.GetFriendsResponse, error) {
	l := logic.NewGetFriendsLogic(ctx, s.svcCtx)
	return l.GetFriends(in)
}

func (s *FriendServer) DeleteFriend(ctx context.Context, in *friend_friend.DeleteFriendRequest) (*friend_friend.DeleteFriendResponse, error) {
	l := logic.NewDeleteFriendLogic(ctx, s.svcCtx)
	return l.DeleteFriend(in)
}

func (s *FriendServer) BlockFriend(ctx context.Context, in *friend_friend.BlockFriendReq) (*friend_friend.BlockFriendResp, error) {
	l := logic.NewBlockFriendLogic(ctx, s.svcCtx)
	return l.BlockFriend(in)
}
