syntax = "proto3";
// 声明使用 Protobuf 3 版本 的语法（目前主流版本，与 proto2 有语法差异）。
package user; //protobuf 的命名空间，跟 Go 无关 定义 Protobuf 的包名，用于避免不同文件中消息 / 服务的命名冲突。
// option go_package = "my-IMSystem/common/proto/user;user"; //指定生成 Go 语言代码时的包路径（这里表示生成的代码会放在当前目录的 user 包下）。
// option go_package = "user";
option go_package = "./user;user";
// 消息定义（数据结构）
// 消息（message）类似编程语言中的 “结构体”，用于定义数据的格式。
// 每个消息可以包含多个字段，每个字段都有一个唯一的编号。
// 字段编号在 Protobuf 中是必须的，用于序列化和反序

// 注册请求：包含用户名和密码
message RegisterRequest {
  string username = 1;  // 字段类型 字段名 = 字段编号
  string password = 2;
}

message RegisterResponse {
  int64 uid = 1;
  string message = 2;
}

message GetUserRequest {
  int64 uid = 1;
}

message GetUserResponse {
  int64 uid = 1;
  string username = 2;
}


message LoginRequest {
  string username = 1;
  string password = 2;
}

message LoginResponse {
  string token = 1;
  string message = 2;
}

// 服务定义（RPC 接口）
service User {
  rpc Register(RegisterRequest) returns (RegisterResponse);
  rpc GetUser(GetUserRequest) returns (GetUserResponse);
  rpc Login(LoginRequest) returns (LoginResponse);
}
